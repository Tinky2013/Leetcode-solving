/*
给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。

示例 1:
输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。
说明: 你可以假设 n 不小于 2 且不大于 58。
*/

//基本思路是动态规划
//暴力递归会超时，不妨先把子问题的最优解都算出来
int integerBreak(int n){
    if(n==2) return 1;
    if(n==3) return 2;

    int a[n+1];
    a[0]=0;
    a[1]=1; //拆剩1
    a[2]=2; //拆剩2
    a[3]=3; //拆剩3
    //剩下4及以上，值得再拆
    for(int i=4;i<=n;i++){
        int max=0;
        for(int j=1;j<=i/2;j++){
            if((a[j]*a[i-j])>=max){
                max=a[j]*a[i-j];
            }
        }
        a[i]=max;
    }
    return a[n];
}

